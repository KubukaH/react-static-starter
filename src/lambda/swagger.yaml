openapi: 3.0.0
info:
  title: Basilwizi Trust Home Page
  description: Basilwizi Trust, people of the Great river. They are found along the Kasambabezi River
  version: 1.0.0

servers:
  - url: https://localhost:7150
    description: Production Server

paths:
  /accounts/authenticate:
    post:
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /accounts/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: Account details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts/revoke-token:
    post:
      summary: Revoke a refresh token
      description: Admin users can revoke the tokens of any account, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /accounts/register:
    post:
      summary: Register a new user account and send a verification email
      description: The first account registered in the system is assigned the `Admin` role, other accounts are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Trust"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                acceptTerms:
                  type: boolean
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"
  /accounts/verify-email:
    post:
      summary: Verify a new account with a verification token received by email after registration
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Verification was successful so you can now login to the account
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification successful, you can now login"
        "400":
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification failed"
  /accounts/forgot-password:
    post:
      summary: Submit email address to reset the password on an account
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
              required:
                - email
      responses:
        "200":
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset instructions"
  /accounts/validate-reset-token:
    post:
      summary: Validate the reset password token received by email after submitting to the /accounts/forgot-password route
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
        "400":
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts/reset-password:
    post:
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                password:
                  type: string
                  example: "newPass123"
                confirmPassword:
                  type: string
                  example: "newPass123"
              required:
                - token
                - password
                - confirmPassword
      responses:
        "200":
          description: Password reset was successful so you can now login to the account with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful, you can now login"
        "400":
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /accounts:
    get:
      summary: Get a list of all accounts
      description: Restricted to admin users.
      operationId: getAllAccounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "Mr"
                    firstName:
                      type: string
                      example: "Basilwizi"
                    lastName:
                      type: string
                      example: "Trust"
                    email:
                      type: string
                      example: "basilwizi@basilwizi.org"
                    role:
                      type: string
                      example: "Admin"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new account
      description: Restricted to admin users.
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Trust"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Editor, User]
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - role
      responses:
        "200":
          description: Account created successfully, verification is not required for accounts created with this endpoint. The details of the new account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email 'basilwizi@basilwizi.org' is already registered"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /accounts/{id}:
    parameters:
      - in: path
        name: id
        description: Account id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single account by id
      description: Admin users can access any account, regular users are restricted to their own account.
      operationId: getAccountById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update an account
      description: Admin users can update any account including role, regular users are restricted to their own account and cannot update role.
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Trust"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Editor, User]
      responses:
        "200":
          description: Account updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete an account
      description: Admin users can delete any account, regular users are restricted to their own account.
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /workers/authenticate:
    post:
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  designation:
                    type: string
                    example: "Editor"
                  bio:
                    type: string
                    example: "Designer of the site"
                  group:
                    type: string
                    example: "Editor"
                  linkOne:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkTwo:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkThree:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /workers/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: Account details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  designation:
                    type: string
                    example: "Editor"
                  bio:
                    type: string
                    example: "Designer of the site"
                  group:
                    type: string
                    example: "Editor"
                  linkOne:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkTwo:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkThree:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /workers/revoke-token:
    post:
      summary: Revoke a refresh token
      description: Admin users can revoke the tokens of any account, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /workers/forgot-password:
    post:
      summary: Submit email address to reset the password on an account
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
              required:
                - email
      responses:
        "200":
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an account)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset instructions"
  /workers/validate-reset-token:
    post:
      summary: Validate the reset password token received by email after submitting to the /workers/forgot-password route
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
        "400":
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /workers/reset-password:
    post:
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                password:
                  type: string
                  example: "newPass123"
                confirmPassword:
                  type: string
                  example: "newPass123"
              required:
                - token
                - password
                - confirmPassword
      responses:
        "200":
          description: Password reset was successful so you can now login to the account with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful, you can now login"
        "400":
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /workers:
    get:
      summary: Get a list of all workers
      description: Accessible publicly.
      operationId: getAllAccounts
      responses:
        "200":
          description: An array of all workers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "Mr"
                    firstName:
                      type: string
                      example: "Basilwizi"
                    lastName:
                      type: string
                      example: "Trust"
                    email:
                      type: string
                      example: "basilwizi@basilwizi.org"
                    designation:
                      type: string
                      example: "Editor"
                    bio:
                      type: string
                      example: "Designer of the site"
                    group:
                      type: string
                      example: "Editor"
                    linkOne:
                      type: string
                      example: "http://www.example.com/basilwizi"
                    linkTwo:
                      type: string
                      example: "http://www.example.com/basilwizi"
                    linkThree:
                      type: string
                      example: "http://www.example.com/basilwizi"
                    role:
                      type: string
                      example: "Admin"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new account
      description: Restricted to admin users.
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Trust"
                designation:
                  type: string
                  example: "Editor"
                bio:
                  type: string
                  example: "Designer of the site"
                group:
                  type: string
                  example: "Editor"
                linkOne:
                  type: string
                  example: "http://www.example.com/basilwizi"
                linkTwo:
                  type: string
                  example: "http://www.example.com/basilwizi"
                linkThree:
                  type: string
                  example: "http://www.example.com/basilwizi"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, Manager, Editor, User]
              required:
                - title
                - firstName
                - lastName
                - designation
                - bio
                - group
                - linkOne
                - linkTwo
                - linkThree
                - email
                - password
                - confirmPassword
                - role
      responses:
        "200":
          description: Account created successfully, verification is not required for workers created with this endpoint. The details of the new account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  designation:
                    type: string
                    example: "Editor"
                  bio:
                    type: string
                    example: "Designer of the site"
                  group:
                    type: string
                    example: "Editor"
                  linkOne:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkTwo:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkThree:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email 'basilwizi@basilwizi.org' is already registered"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /workers/{id}:
    parameters:
      - in: path
        name: id
        description: Account id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single account by id
      description: Admin users can access any account, regular users are restricted to their own account.
      operationId: getAccountById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  designation:
                    type: string
                    example: "Editor"
                  bio:
                    type: string
                    example: "Designer of the site"
                  group:
                    type: string
                    example: "Editor"
                  linkOne:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkTwo:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkThree:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update an account
      description: Admin users can update any account including role, regular users are restricted to their own account and cannot update role.
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Trust"
                designation:
                  type: string
                  example: "Editor"
                bio:
                  type: string
                  example: "Designer of the site"
                group:
                  type: string
                  example: "Editor"
                linkOne:
                  type: string
                  example: "http://www.example.com/basilwizi"
                linkTwo:
                  type: string
                  example: "http://www.example.com/basilwizi"
                linkThree:
                  type: string
                  example: "http://www.example.com/basilwizi"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, Manager, Editor, User]
      responses:
        "200":
          description: Account updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Basilwizi"
                  lastName:
                    type: string
                    example: "Trust"
                  designation:
                    type: string
                    example: "Editor"
                  bio:
                    type: string
                    example: "Designer of the site"
                  group:
                    type: string
                    example: "Editor"
                  linkOne:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkTwo:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  linkThree:
                    type: string
                    example: "http://www.example.com/basilwizi"
                  email:
                    type: string
                    example: "basilwizi@basilwizi.org"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete an account
      description: Admin users can delete any account, regular users are restricted to their own account.
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /subscribe/saveemail:
    post:
      summary: Save the email of subscriber
      description: Save emails of subscribers
      operationId: saveEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
              required:
                - email
      responses:
        "200":
          description: The email has been successfully subscribed to the Basilwizi and will receive regular updates on projects and latest stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscriber added to the database successfully"
  /contactus/sendmessage:
    post:
      summary: Leave a message for admins to contact you latter
      description: Save messages from visitor
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: string
                  example: "Basilwizi Bamulonga"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                message:
                  type: string
                  example: "The basilwizi we know is here!"
              required:
                - names
                - email
                - message
      responses:
        "200":
          description: The email has been successfully subscribed to the Basilwizi and will receive regular updates on news and latest stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message was went to Admin"
  /contactus:
    get:
      summary: Get a list of all messages
      description: Restricted to admin users.
      operationId: getAllContactus
      responses:
        "200":
          description: An array of all messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    names:
                      type: string
                      example: "Basilwizi Bamulonga"
                    email:
                      type: string
                      example: "basilwizi@basilwizi.org"
                    message:
                      type: string
                      example: "The basilwizi we know is here!"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /news/savenews:
    post:
      summary: Create a stubnning story for the people of basilwizi to read
      description: Edit your article for Grammar and spelling before you publigh it
      operationId: saveNews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: string
                  example: "Basilwizi Bamulonga"
                article_title:
                  type: string
                  example: "The Great River is now producing abundant Fish for the People"
                category:
                  type: string
                  example: "Tonga"
                article_content:
                  type: string
                  example: "Abuntantly available fish ends drought"
              required:
                - author
                - article_title
                - article_content
                - category
      responses:
        "200":
          description: Article will be sent to readers now
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The article was saved and will be available to readers"
  /news:
    get:
      summary: Get a list of news articles in the DB
      description: All readers have the right to these articles
      operationId: getAllNews
      responses:
        "200":
          description: These are the articles you have
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    author:
                      type: string
                      example: "Basilwizi Bamulonga"
                    article_title:
                      type: string
                      example: "The Basilwizi we know"
                    category:
                      type: string
                      example: "Tonga"
                    article_content:
                      type: string
                      example: "The basilwizi we know is here!"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /news/{id}:
    parameters:
      - in: path
        name: id
        description: News Article Id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single blog by id
      description: Lets read each news article.
      operationId: getArticleById
      responses:
        "200":
          description: Article details here
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  author:
                    type: string
                    example: "Basilwizi Bamulonga"
                  article_title:
                    type: string
                    example: "The Great River is now producing abundant Fish for the People"
                  category:
                    type: string
                    example: "Tonga"
                  article_content:
                    type: string
                    example: "Abuntantly available fish ends drought"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
    put:
      summary: Update an article
      description: Admin users can update news articles and owners of articles can update their own articles.
      operationId: updateNewsArticle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                author:
                  type: string
                  example: "Basilwizi Bamulonga"
                article_title:
                  type: string
                  example: "The Great River is now producing abundant Fish for the People"
                category:
                  type: string
                  example: "Tonga"
                article_content:
                  type: string
                  example: "Abuntantly available fish ends drought"
      responses:
        "200":
          description: Article updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  author:
                    type: string
                    example: "Basilwizi Bamulonga"
                  article_title:
                    type: string
                    example: "The Great River is now producing abundant Fish for the People"
                  category:
                    type: string
                    example: "Tonga"
                  article_content:
                    type: string
                    example: "Abuntantly available fish ends drought"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /blogposts/makepost:
    post:
      summary: Write a blog and share it on the wall. Only logged in users can write but all other visitors to the site will be able to view only
      description: Save messages from visitor
      operationId: makepost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Mr"
                firstName:
                  type: string
                  example: "Basilwizi"
                lastName:
                  type: string
                  example: "Bamulonga"
                blog_title:
                  type: string
                  example: "The River is flooding"
                blog_message:
                  type: string
                  example: "The basilwizi we know is here! Here we come."
              required:
                - title
                - firstName
                - lastName
                - blog_title
                - blog_message
      responses:
        "200":
          description: The Post was saved to the database and it will be shown on the wall for all to see
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Blog post created and now trending on the site"
  /blogposts:
    get:
      summary: Get a list of all blogposts
      description: Not restricted to any user. Even guests can view posts and comments.
      operationId: getAllBlogposts
      responses:
        "200":
          description: An array of all blogposts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "Mr"
                    firstName:
                      type: string
                      example: "Basilwizi"
                    lastName:
                      type: string
                      example: "Trust"
                    blog_title:
                      type: string
                      example: "The people of the Great River"
                    blog_message:
                      type: string
                      example: "The people want the river back. They are going to claim it"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
  /likes:
    get:
      summary: Get a list of all like
      description: No restriction.
      operationId: getAllLikes
      responses:
        "200":
          description: An array of all likes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    liked:
                      type: boolean
                      example: true
                    liked_by:
                      type: string
                      example: "Basil Lwizi"
                    like_to:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /likes/{id}/like:
    post:
      summary: Like a post or article
      description: Like a post by another writer
      operationId: likePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                liked:
                  type: boolean
                  example: true
                liked_by:
                  type: string
                  example: "Basil Lwizi"
              required:
                - liked
                - liked_by
      responses:
        "200":
          description: Thank you for liking a post.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  liked:
                    type: boolean
                    example: true
                  liked_by:
                    type: string
                    example: "Basil lwizi"
                  like_to:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: There was an error saving to DB
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occured while saving to DB"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /likes/{id}:
    parameters:
      - in: path
        name: id
        description: Like id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a like's details
      description: Likes of posts have details
      operationId: getLikeById
      responses:
        "200":
          description: Details of the specified like
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  liked:
                    type: boolean
                    example: true
                  liked_by:
                    type: string
                    example: "Basil Lwizi"
                  like_to:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /music:
    get:
      summary: Get a list of all music
      description: No restriction.
      operationId: getAllTracks
      responses:
        "200":
          description: An array of all tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    trackName:
                      type: string
                      example: 'my song'
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /music/uploadtrack:
    post:
      summary: Create a new track
      description: Restricted to admin users.
      operationId: uploadTrack
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trackName:
                  type: string
                  example: 'my song'
              required:
                - trackName
      responses:
        "200":
          description: Account created successfully, verification is not required for music created with this endpoint. The details of the new account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  trackName:
                    type: string
                    example: 'my song'
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This track is already available"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /music/{id}:
    parameters:
      - in: path
        name: id
        description: Like id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single Track by id
      description: Download and play a track.
      operationId: getSingleTrack
      responses:
        "200":
          description: Details of the specified account
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  trackName:
                    type: string
                    example: 'my song'
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /projects/saveproject:
    post:
      summary: Create a stubnning story for the people of basilwizi to read
      description: Edit your article for Grammar and spelling before you publigh it
      operationId: saveProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_author:
                  type: string
                  example: "Basilwizi Bamulonga"
                project_title:
                  type: string
                  example: "The Great River is now producing abundant Fish for the People"
                project_description:
                  type: string
                  example: "Abuntantly available fish ends drought"
              required:
                - project_author
                - project_title
                - project_description
      responses:
        "200":
          description: Article will be sent to readers now
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The article was saved and will be available to readers"
  /projects:
    get:
      summary: Get a list of projects articles in the DB
      description: All readers have the right to these articles
      operationId: getAllProjects
      responses:
        "200":
          description: These are the articles you have
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    project_author:
                      type: string
                      example: "Basilwizi Bamulonga"
                    project_title:
                      type: string
                      example: "The Basilwizi we know"
                    project_description:
                      type: string
                      example: "The basilwizi we know is here!"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /projects/{id}:
    parameters:
      - in: path
        name: id
        description: ProjectArticle id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    put:
      summary: Update an project
      description: Admin users can update projects articles and owners of articles can update their own articles.
      operationId: updateProjectArticle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_author:
                  type: string
                  example: "Basilwizi Bamulonga"
                project_title:
                  type: string
                  example: "The Great River is now producing abundant Fish for the People"
                project_description:
                  type: string
                  example: "Abuntantly available fish ends drought"
      responses:
        "200":
          description: Article updated successfully. The details of the updated account are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  project_author:
                    type: string
                    example: "Basilwizi Bamulonga"
                  project_title:
                    type: string
                    example: "The Great River is now producing abundant Fish for the People"
                  project_description:
                    type: string
                    example: "Abuntantly available fish ends drought"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /mailing/save:
    post:
      summary: Subscribe to the Twaabane times newsletter
      description: Save mailing details of subscriber
      operationId: saveMailing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: string
                  example: "Basilwizi Bamulonga"
                email:
                  type: string
                  example: "basilwizi@basilwizi.org"
                termsOfUse:
                  type: boolean
                  example: true
              required:
                - names
                - email
                - termsOfUse
      responses:
        "200":
          description: The email has been successfully subscribed to the Basilwizi and will receive regular updates on news and latest stories
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscriber was saved"
  /mailing:
    get:
      summary: Get a list of all mailing
      description: Restricted to admin users.
      operationId: getAllMailing
      responses:
        "200":
          description: An array of all mailing
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    names:
                      type: string
                      example: "Basilwizi Bamulonga"
                    email:
                      type: string
                      example: "basilwizi@basilwizi.org"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"